//plugins {
//    id 'org.springframework.boot' version '2.3.7.RELEASE'
//    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
//    id 'java'
//}
buildscript {
    apply from: file('dependencies.gradle')
    repositories {
        repositories {

            maven { url 'https://maven.aliyun.com/repository/public' }
        }
        dependencies { 						// 依赖库
            classpath libraries.'spring-boot-gradle-plugin'
        }
    }
}


group project_group
version project_version
def env = System.getProperty("env") ?: 'dev' // 获取env环境属性


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot' // 引入之前的插件
    apply plugin: 'io.spring.dependency-management' // 引入之前的插件
    sourceCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    targetCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    repositories {  // 配置Gradle仓库
        def ALIYUN_REPOSITORY_URL = 'https://maven.aliyun.com/nexus/content/groups/public'
        def ALIYUN_JCENTER_URL = 'https://maven.aliyun.com/nexus/content/repositories/jcenter'
        all {
            ArtifactRepository repo ->
                if (repo instanceof MavenArtifactRepository) {
                    def url = repo.url.toString()
                    if (url.startsWith('https://repo1.maven.org/maven2')) {
                        project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_REPOSITORY_URL."
                        remove repo
                    }
                    if (url.startsWith('https://jcenter.bintray.com/')) {
                        project.logger.lifecycle "Repository ${repo.url} replaced by $ALIYUN_JCENTER_URL."
                        remove repo
                    }
                }
        }
        mavenLocal()
        maven { url ALIYUN_REPOSITORY_URL } // 设置阿里云仓库
        maven { url ALIYUN_JCENTER_URL } // 设置阿里云仓库
    }
    dependencies {  // 公共依赖库管理
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test') { // 此时默认会引入JUnit4组件
            exclude group: 'junit', module: 'junit' // 移除旧版本的测试工具
        }
        testImplementation(enforcedPlatform(libraries.'junit-bom')) // 将当前的项目强制性的绑定为JUnit5运行
        testImplementation(libraries.'junit-jupiter-api')
        testImplementation(libraries.'junit-vintage-engine')
        testImplementation(libraries.'junit-jupiter-engine')
        testImplementation(libraries.'junit-platform-launcher')

    }
    sourceSets {    // 源代码目录配置



        main { // main及相关子目录配置
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources'] }
        }


    }
    task copyTestResources(type: Copy){
        from "${projectDir}/main/resources"
        into "${buildDir}/classes/main"
    }
    task sourceJar(type: Jar, dependsOn: classes) { // 源代码的打包任务
        archiveClassifier = 'sources' // 设置文件的后缀
        from sourceSets.main.allSource // 所有源代码的读取路径
    }

    artifacts { // 最终的打包的操作任务
        archives sourceJar // 源代码打包
//        archives javadocJar // javadoc打包
    }
    gradle.taskGraph.whenReady {    // 在所有的操作准备好后触发
        tasks.each { task ->    // 找出所有的任务
            if (task.name.contains('test')) {   // 如果现在发现有test任务
                // 如果将enabled设置为true表示要执行测试任务，如果设置为false表示不执行测试任务
                task.enabled = false
            }
        }
    }


    test {
        useJUnitPlatform()
    }
}
project("common"){
    dependencies {

        api(libraries.'mybatisPlus')
   api(libraries.'mysql')
    api(libraries.'web')
        api(libraries.'log')
        api(libraries.'fastjson')
    }
}
project("domanservice"){

    dependencies {
       implementation  (project(":common"))

        implementation(libraries.'aop')

        implementation(libraries.'shiro')
        implementation(libraries.'ehcahe')
        implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
        implementation(libraries.'okhttp3')
        implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    }
    test {
        useJUnitPlatform()
    }
}
